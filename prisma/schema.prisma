// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  commands      RobotCommand[]
  assignedAlerts AnomalyAlert[] @relation("UserAssignedAlerts")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Robot Management Models
model SensorData {
  id          String   @id @default(cuid())
  sensorType  String   // temperature, humidity, distance, etc.
  value       Float
  unit        String   // celsius, percent, mm, etc.
  timestamp   DateTime @default(now())
}

model SystemLog {
  id        String   @id @default(cuid())
  logType   LogType
  message   String
  timestamp DateTime @default(now())
}

model RobotCommand {
  id        String        @id @default(cuid())
  command   String
  params    Json?
  status    CommandStatus @default(PENDING)
  result    String?
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  timestamp DateTime      @default(now())
}

model RaspberryPiConfig {
  id       String @id @default(cuid())
  name     String @unique
  value    String
  category String @default("general")
}

// Anomali Tespiti ve Kamera Modelleri
model CameraImage {
  id              String    @id @default(cuid())
  imageUrl        String    // S3 veya başka bir depolama hizmetindeki URL
  thumbnailUrl    String?   // Küçük önizleme için URL (isteğe bağlı)
  capturedAt      DateTime  @default(now())
  processed       Boolean   @default(false)
  detections      Detection[]
  gpsLatitude     Float?
  gpsLongitude    Float?
  robotStatus     Json?     // Robot durum bilgisi (JSON olarak saklanır)
}

model Detection {
  id              String    @id @default(cuid())
  cameraImage     CameraImage @relation(fields: [cameraImageId], references: [id], onDelete: Cascade)
  cameraImageId   String
  detectionType   DetectionType
  confidence      Float
  boundingBox     Json?     // {x, y, width, height} şeklinde JSON
  detectedAt      DateTime  @default(now())
  isFalsePositive Boolean   @default(false)
  notes           String?   // Tespit hakkında notlar
}

model AnomalyAlert {
  id              String    @id @default(cuid())
  title           String
  description     String?
  severity        AlertSeverity
  status          AlertStatus @default(NEW)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resolvedAt      DateTime?
  assignedUserId  String?
  assignedUser    User?     @relation("UserAssignedAlerts", fields: [assignedUserId], references: [id])
  gpsLatitude     Float?
  gpsLongitude    Float?
  relatedImages   AnomalyAlertImage[]
}

model AnomalyAlertImage {
  id              String    @id @default(cuid())
  anomalyAlert    AnomalyAlert @relation(fields: [anomalyAlertId], references: [id], onDelete: Cascade)
  anomalyAlertId  String
  imageUrl        String
  addedAt         DateTime  @default(now())
}

// Enum Tanımlamaları
enum Role {
  USER
  ADMIN
  APPROVED
}

enum LogType {
  INFO
  WARNING
  ERROR
}

enum CommandStatus {
  PENDING
  EXECUTED
  FAILED
}

enum DetectionType {
  PERSON
  VEHICLE
  ANIMAL
  FIRE
  SMOKE
  UNKNOWN
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  NEW
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  FALSE_ALARM
}
